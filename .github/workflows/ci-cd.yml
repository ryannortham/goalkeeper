name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]
  schedule:
    - cron: '30 2 * * 1'  # Weekly security scan

env:
  FLUTTER_VERSION: '3.32.5'
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.14.2'

jobs:
  # =============================================================================
  # ANALYSIS PHASE - Runs in parallel for all pushes/PRs
  # =============================================================================
  
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 📦 Install dependencies
        run: flutter pub get

      - name: 🎨 Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: 🔍 Analyze project source
        run: flutter analyze

      - name: 🧪 Run tests
        run: |
          if [ -d "test" ]; then
            flutter test
          else
            echo "No tests found, skipping test execution"
          fi

  security-scan:
    name: 🔒 Security Scan (MobSF)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python for MobSF
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: 🔒 Run MobSF Security Scan
        uses: MobSF/mobsfscan@main
        with:
          args: '. --sarif --output mobsf-results.sarif || true'
      
      - name: 📤 Upload MobSF SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: mobsf-results.sarif
          category: mobsf-security-scan
      
      - name: 📋 Upload scan results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobsf-security-results
          path: mobsf-results.sarif
          retention-days: 30

  codeql-analyze:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    timeout-minutes: 360

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript-typescript
        build-mode: none
        # Add specific configuration for consistent analysis
        config: |
          name: "CodeQL Config"
          queries:
            - uses: security-and-quality

    - name: � Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript-typescript"
        # Add upload-database to ensure configuration persistence
        upload-database: true

  # =============================================================================
  # BUILD PHASE - Only runs on main branch or releases
  # =============================================================================
  
  build:
    name: 🏗️ Build Release
    needs: [test, security-scan, codeql-analyze]
    runs-on: ubuntu-latest
    # Only run on main branch pushes OR releases
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'release'
    
    outputs:
      version_name: ${{ steps.version.outputs.version_name }}
      version_code: ${{ steps.version.outputs.version_code }}
      track: ${{ steps.version.outputs.track }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🏗️ Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: 📦 Install dependencies
        run: flutter pub get

      # Clean only if needed
      - name: 🧹 Clean build environment (if needed)
        run: |
          echo "🧹 Cleaning build environment"
          flutter clean
          rm -rf android/app/build/
          rm -rf android/.gradle/configuration-cache/
        continue-on-error: true

      - name: 📋 Extract version info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION_NAME="${{ github.event.release.tag_name }}"
            VERSION_NAME="${VERSION_NAME#v}"
            # For releases, use run number + 100 to ensure it's always higher than 56
            VERSION_CODE="$((100 + GITHUB_RUN_NUMBER))"
            TRACK="internal"
          else
            # Extract version from pubspec.yaml
            PUBSPEC_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//')
            VERSION_NAME="$PUBSPEC_VERSION-dev.${GITHUB_SHA::8}"
            # For dev builds, use run number + 200 to ensure it's higher than any release
            VERSION_CODE="$((200 + GITHUB_RUN_NUMBER))"
            TRACK="internal"
          fi
          
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "track=$TRACK" >> $GITHUB_OUTPUT
          echo "📱 Version: $VERSION_NAME (Code: $VERSION_CODE)"
          echo "🚀 Track: $TRACK"

      - name: 🔑 Setup Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/app/keystore.jks
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      - name: 📱 Build release AAB
        env:
          JAVA_OPTS: -Xmx4g -XX:MaxMetaspaceSize=512m
          GRADLE_OPTS: -Xmx4g -XX:MaxMetaspaceSize=512m -Dorg.gradle.daemon=false
        run: |
          flutter build appbundle --release \
            --build-name=${{ steps.version.outputs.version_name }} \
            --build-number=${{ steps.version.outputs.version_code }}

      - name: 📤 Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-aab-${{ steps.version.outputs.version_name }}
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

  # =============================================================================
  # DEPLOY PHASE - Only runs after successful build on main/releases
  # =============================================================================
  
  deploy:
    name: 🚀 Deploy to Play Store
    needs: build
    runs-on: ubuntu-latest
    # Only run on main branch pushes OR releases
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'release'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📥 Download AAB artifact
        uses: actions/download-artifact@v4
        with:
          name: release-aab-${{ needs.build.outputs.version_name }}
          path: build/app/outputs/bundle/release/

      - name: 🔍 Verify AAB and version info
        run: |
          echo "📱 Deploying version: ${{ needs.build.outputs.version_name }}"
          echo "🔢 Version code: ${{ needs.build.outputs.version_code }}"
          echo "🚀 Track: ${{ needs.build.outputs.track }}"
          echo "📦 AAB file:"
          ls -la build/app/outputs/bundle/release/
          
          # Verify AAB file exists and is valid
          if [ ! -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            echo "❌ AAB file not found!"
            exit 1
          fi
          
          # Check file size (should be reasonable)
          AAB_SIZE=$(stat -c%s build/app/outputs/bundle/release/app-release.aab)
          echo "📦 AAB size: ${AAB_SIZE} bytes"
          if [ $AAB_SIZE -lt 1000000 ]; then
            echo "⚠️ Warning: AAB file seems small (< 1MB)"
          fi

      - name: 🏷️ Create GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: build/app/outputs/bundle/release/app-release.aab
          tag_name: ${{ github.event.release.tag_name }}
          name: Release ${{ needs.build.outputs.version_name }}
          body: |
            🚀 **Release ${{ needs.build.outputs.version_name }}**
            
            **Build Information:**
            - Version Name: `${{ needs.build.outputs.version_name }}`
            - Version Code: `${{ needs.build.outputs.version_code }}`
            - Build Date: `${{ github.event.head_commit.timestamp }}`
            - Commit SHA: `${{ github.sha }}`
            
            **Downloads:**
            - Android App Bundle (AAB) attached below
            - Available on Google Play Internal Testing
            
            See the [changelog](./android/whatsnew/whatsnew-en-US) for details.

      - name: 🚀 Upload to Play Store
        id: upload-play-store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: ${{ secrets.PACKAGE_NAME }}
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: ${{ needs.build.outputs.track }}
          status: draft
          inAppUpdatePriority: 2
          whatsNewDirectory: android/whatsnew
          releaseName: ${{ needs.build.outputs.version_name }}
        continue-on-error: true

      - name: ⏳ Wait before retry
        if: steps.upload-play-store.outcome == 'failure'
        run: |
          echo "⏳ Waiting 30 seconds before retrying Play Store upload..."
          sleep 30

      - name: 🔄 Retry Play Store Upload
        if: steps.upload-play-store.outcome == 'failure'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: ${{ secrets.PACKAGE_NAME }}
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: ${{ needs.build.outputs.track }}
          status: draft 
          inAppUpdatePriority: 2
          whatsNewDirectory: android/whatsnew
          releaseName: ${{ needs.build.outputs.version_name }}-retry
