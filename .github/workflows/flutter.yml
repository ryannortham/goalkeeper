name: Flutter CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      # Cache Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/flutter
          key: flutter-sdk-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-sdk-${{ runner.os }}-

      # Setup Flutter SDK
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.1'
          channel: 'stable'
          cache: true

      # Cache Pub dependencies
      - name: Cache Pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.pub-cache
          key: pub-cache-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      - name: Install dependencies
        run: flutter pub get

      # Verify formatting
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: flutter analyze

      # Run tests if any exist
      - name: Check if tests exist
        id: check_tests
        run: |
          if [ -d "test" ]; then
            echo "tests_exist=true" >> $GITHUB_OUTPUT
          else
            echo "tests_exist=false" >> $GITHUB_OUTPUT
          fi

      - name: Run tests
        if: steps.check_tests.outputs.tests_exist == 'true'
        run: flutter test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    # Run on main branch pushes OR on releases
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'release'
    
    steps:
      - uses: actions/checkout@v4

      # Cache Flutter SDK
      - name: Cache Flutter SDK
        uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/flutter
          key: flutter-sdk-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            flutter-sdk-${{ runner.os }}-

      # Setup Flutter SDK
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.1'
          channel: 'stable'
          cache: true

      # Cache Pub dependencies
      - name: Cache Pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            $HOME/.pub-cache
          key: pub-cache-${{ runner.os }}-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            pub-cache-${{ runner.os }}-

      # Cache Gradle dependencies
      - name: Cache Gradle dependencies
        id: gradle-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Cache Android SDK
      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            /usr/local/lib/android/sdk
            ~/.android
          key: android-sdk-${{ runner.os }}-${{ hashFiles('android/app/build.gradle') }}
          restore-keys: |
            android-sdk-${{ runner.os }}-

      # Setup Java for Android builds
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install dependencies
        run: flutter pub get

      # Selective clean - only if Gradle cache missed or we have memory pressure
      - name: Clean build environment (if needed)
        if: steps.gradle-cache.outputs.cache-hit != 'true'
        run: |
          echo "ðŸ§¹ Gradle cache miss detected - cleaning selectively"
          # Only clean Flutter build, preserve Gradle caches
          flutter clean
          # Remove only corrupted local Gradle files, keep global cache
          rm -rf android/app/build/
          rm -rf android/.gradle/configuration-cache/
        continue-on-error: true

      # Extract version information
      - name: Extract version info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Use release tag (e.g., v1.2.3 -> 1.2.3)
            VERSION_NAME="${{ github.event.release.tag_name }}"
            VERSION_NAME="${VERSION_NAME#v}"  # Remove 'v' prefix if present
            # Generate version code from semantic version (1.2.3 -> 10203)
            IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NAME"
            VERSION_CODE=$((${VERSION_PARTS[0]} * 10000 + ${VERSION_PARTS[1]} * 100 + ${VERSION_PARTS[2]}))
            TRACK="internal"
          else
            # Use commit SHA for dev builds
            VERSION_NAME="dev-${GITHUB_SHA::8}"
            VERSION_CODE="${GITHUB_RUN_NUMBER}"
            TRACK="internal"
          fi
          
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "track=$TRACK" >> $GITHUB_OUTPUT
          echo "ðŸ“± Version: $VERSION_NAME (Code: $VERSION_CODE)"
          echo "ðŸš€ Track: $TRACK"

      # Setup Android signing
      - name: Setup Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/app/keystore.jks
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=keystore.jks" >> android/key.properties

      # Build release AAB
      - name: Build release AAB
        env:
          JAVA_OPTS: -Xmx4g -XX:MaxMetaspaceSize=512m
          GRADLE_OPTS: -Xmx4g -XX:MaxMetaspaceSize=512m -Dorg.gradle.daemon=false
        run: |
          flutter build appbundle --release \
            --build-name=${{ steps.version.outputs.version_name }} \
            --build-number=${{ steps.version.outputs.version_code }}

      # Store the built AAB as an artifact
      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-aab-${{ steps.version.outputs.version_name }}
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

      # Create GitHub release for tagged versions
      - name: Create GitHub Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: build/app/outputs/bundle/release/app-release.aab
          tag_name: ${{ github.event.release.tag_name }}
          name: Release ${{ steps.version.outputs.version_name }}
          body: |
            ðŸš€ **Release ${{ steps.version.outputs.version_name }}**
            
            **Build Information:**
            - Version Name: `${{ steps.version.outputs.version_name }}`
            - Version Code: `${{ steps.version.outputs.version_code }}`
            - Build Date: `${{ github.event.head_commit.timestamp }}`
            - Commit SHA: `${{ github.sha }}`
            
            **Downloads:**
            - Android App Bundle (AAB) attached below
            - Available on Google Play Internal Testing
            
            See the [changelog](./android/whatsnew/whatsnew-en-US) for details.

      # Upload to Google Play Store
      - name: Upload to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: ${{ secrets.PACKAGE_NAME }}
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: ${{ steps.version.outputs.track }}
          status: draft
          inAppUpdatePriority: 2
          whatsNewDirectory: android/whatsnew
          releaseName: ${{ steps.version.outputs.version_name }}
